{"ast":null,"code":"var _jsxFileName = \"/home/stin/School/Treblecross/src/pages/Home.tsx\";\nimport { IonContent, IonHeader, IonPage, IonTitle, IonToolbar, IonItem, IonRange, IonButton } from '@ionic/react';\nimport React from 'react';\nimport './Home.css';\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      numberOfBoards: 1,\n      boardState: [],\n      boardSizeArray: [],\n      boardBruteForce: [],\n      gameOver: false,\n      computerWins: false\n    };\n    this.generateTrebleCrossBoard = this.generateTrebleCrossBoard.bind(this);\n    this.updateBoardState = this.updateBoardState.bind(this);\n    this.computersTurn = this.computersTurn.bind(this);\n    this.calculateHeaps = this.calculateHeaps.bind(this);\n    this.calculateNimSum = this.calculateNimSum.bind(this);\n    this.doesWinningMoveExist = this.doesWinningMoveExist.bind(this);\n  }\n\n  generateTrebleCrossBoard() {\n    let tempBoardSizeArray = [];\n    let tempBoardState = [];\n\n    for (let i = 0; i < this.state.numberOfBoards; i++) {\n      //creates a board of size 1 to 14\n      tempBoardSizeArray.push(Math.floor(Math.random() * Math.floor(8)) + 5);\n      tempBoardState.push(new Array(tempBoardSizeArray[i]).fill(false));\n    }\n\n    this.setState({\n      boardState: tempBoardState,\n      boardSizeArray: tempBoardSizeArray\n    });\n  }\n\n  updateBoardState(boardIndex, squareIndex) {\n    if (this.state.boardState[boardIndex][squareIndex] !== true && this.state.gameOver !== true) {\n      let tempBoardState = this.state.boardState;\n      tempBoardState[boardIndex][squareIndex] = true;\n      this.setState({\n        boardState: tempBoardState\n      });\n      this.computersTurn();\n    }\n  }\n\n  calculateHeaps(boardState) {\n    let evaluationArray = [];\n    let tempEvalArray = [];\n    let heapSize = 0; //need to see all heaps\n\n    for (let i = 0; i < this.state.numberOfBoards; i++) {\n      heapSize = 0;\n\n      for (let j = 0; j < this.state.boardSizeArray[i]; j++) {\n        if (boardState[i][j] === false) {\n          heapSize = heapSize + 1;\n\n          if (j === 0) {\n            heapSize = heapSize + 1;\n          }\n        } else {\n          //we hit an X\n          if (heapSize !== 0) {\n            heapSize = heapSize - 1;\n          }\n\n          if (heapSize !== 0) {\n            tempEvalArray.push(heapSize);\n          }\n\n          heapSize = -1;\n        }\n      }\n\n      if (heapSize === this.state.boardSizeArray[i]) {\n        heapSize = heapSize + 2;\n        tempEvalArray.push(heapSize);\n        heapSize = 0;\n      } else {\n        if (heapSize !== 0 && heapSize !== -1) {\n          heapSize = heapSize + 1;\n          tempEvalArray.push(heapSize);\n          heapSize = 0;\n        }\n      }\n\n      evaluationArray.push(tempEvalArray);\n      tempEvalArray = [];\n    }\n\n    return evaluationArray;\n  }\n\n  calculateNimSum(evaluationArray) {\n    let heapValues = [0, 0, 0, 1, 1, 1, 2, 2, 0, 3, 3, 1, 1, 1, 0];\n    let nimValueArray = evaluationArray.map(board_heaps => {\n      return board_heaps.map(heap => {\n        return heapValues[heap];\n      });\n    });\n    let sum = 0;\n\n    for (let i = 0; i < this.state.numberOfBoards; i++) {\n      for (let j = 0; j < nimValueArray[i].length; j++) {\n        if (nimValueArray[i][j]) {\n          sum = sum ^ nimValueArray[i][j];\n        }\n      }\n    }\n\n    return sum;\n  }\n\n  doesWinningMoveExist() {\n    let sentinel = true;\n    let winningMove = [-1, -1];\n\n    for (let i = 0; i < this.state.numberOfBoards; i++) {\n      for (let j = 0; j < this.state.boardSizeArray[i]; j++) {\n        if (this.state.boardState[i][j] === true) {\n          if (j - 1 > -1) {\n            if (this.state.boardState[i][j - 1] === true) {\n              sentinel = false;\n\n              if (j - 2 > -1) {\n                winningMove = [i, j - 2];\n              } else {\n                winningMove = [i, j + 1];\n              }\n            }\n          }\n\n          if (j - 2 > -1) {\n            if (this.state.boardState[i][j - 2] === true) {\n              sentinel = false;\n              winningMove = [i, j - 1];\n            }\n          }\n\n          if (j + 1 < this.state.boardState[i].length) {\n            if (this.state.boardState[i][j + 1] === true) {\n              sentinel = false;\n\n              if (j + 2 < this.state.boardState[i].length) {\n                winningMove = [i, j + 2];\n              } else {\n                winningMove = [i, j - 1];\n              }\n            }\n          }\n\n          if (j + 2 < this.state.boardState[i].length) {\n            if (this.state.boardState[i][j + 2] === true) {\n              sentinel = false;\n              winningMove = [i, j + 1];\n            }\n          }\n        }\n      }\n    }\n\n    return winningMove;\n  }\n\n  didPlayerWin() {\n    let win = false;\n\n    for (let i = 0; i < this.state.numberOfBoards; i++) {\n      for (let j = 0; j < this.state.boardSizeArray[i]; j++) {\n        if (this.state.boardState[i][j] === true) {\n          if (j + 1 < this.state.boardSizeArray[i] && this.state.boardState[i][j + 1] === true) {\n            if (j + 2 < this.state.boardSizeArray[i] && this.state.boardState[i][j + 2] === true) {\n              this.setState({\n                gameOver: true,\n                computerWins: false\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return win;\n  }\n\n  computersTurn() {\n    let cur_heaps = this.calculateHeaps(this.state.boardState);\n    let cur_nimsum = this.calculateNimSum(cur_heaps); //evaulate board state\n\n    let bruteForce = [];\n\n    for (let i = 0; i < this.state.boardState.length; i++) {\n      let temp = [];\n\n      for (let j = 0; j < this.state.boardState[i].length; j++) {\n        temp.push(this.state.boardState[i][j]);\n      }\n\n      bruteForce.push(temp);\n    } //brute force method to try and find best bestMove\n\n\n    for (let i = 0; i < this.state.numberOfBoards; i++) {\n      for (let j = 0; j < this.state.boardSizeArray[i]; j++) {\n        let sentinel = true;\n\n        if (bruteForce[i][j] === true) {\n          sentinel = false;\n        }\n\n        if (j - 1 > -1) {\n          if (bruteForce[i][j - 1] === true) {\n            sentinel = false;\n          }\n        }\n\n        if (j - 2 > -1) {\n          if (bruteForce[i][j - 2] === true) {\n            sentinel = false;\n          }\n        }\n\n        if (j + 1 < bruteForce[i].length) {\n          if (bruteForce[i][j + 1] === true) {\n            sentinel = false;\n          }\n        }\n\n        if (j + 2 < bruteForce[i].length) {\n          if (bruteForce[i][j + 2] === true) {\n            sentinel = false;\n          }\n        }\n\n        let winningMove = this.doesWinningMoveExist();\n\n        if (winningMove[0] !== -1) {\n          let tempBoardState = this.state.boardState;\n          tempBoardState[winningMove[0]][winningMove[1]] = true;\n          this.setState({\n            boardState: tempBoardState,\n            gameOver: true,\n            computerWins: true\n          });\n          break;\n        }\n\n        if (sentinel) {\n          bruteForce[i][j] = true;\n          let heaps = this.calculateHeaps(bruteForce);\n          let nimsum = this.calculateNimSum(heaps);\n\n          if (nimsum === 0) {\n            //we found our move\n            let tempBoardState = this.state.boardState;\n            tempBoardState[i][j] = true;\n            this.setState({\n              boardState: tempBoardState\n            });\n            break;\n          } else {\n            bruteForce[i][j] = false;\n          }\n        }\n      }\n    } //we have found zero moves to reduce game to zero sum. make first available move that does not immediately lose the game\n\n\n    for (let i = 0; i < this.state.numberOfBoards; i++) {\n      for (let j = 0; j < this.state.boardSizeArray[i]; j++) {\n        let sentinel = true;\n\n        if (bruteForce[i][j] === true) {\n          sentinel = false;\n        }\n\n        if (j - 1 > -1) {\n          if (bruteForce[i][j - 1] === true) {\n            sentinel = false;\n          }\n        }\n\n        if (j - 2 > -1) {\n          if (bruteForce[i][j - 2] === true) {\n            sentinel = false;\n          }\n        }\n\n        if (j + 1 < bruteForce[i].length) {\n          if (bruteForce[i][j + 1] === true) {\n            sentinel = false;\n          }\n        }\n\n        if (j + 2 < bruteForce[i].length) {\n          if (bruteForce[i][j + 2] === true) {\n            sentinel = false;\n          }\n        }\n\n        if (sentinel) {\n          let tempBoardState = this.state.boardState;\n          tempBoardState[i][j] = true;\n          this.setState({\n            boardState: tempBoardState\n          });\n          break;\n        }\n      }\n    } //we have found zero moves we can do that will not immediately lose the game. time for the computer to lose, gg player.\n\n\n    for (let i = 0; i < this.state.numberOfBoards; i++) {\n      for (let j = 0; j < this.state.boardSizeArray[i]; j++) {\n        if (bruteForce[i][j] !== true) {\n          let tempBoardState = this.state.boardState;\n          tempBoardState[i][j] = true;\n          this.setState({\n            boardState: tempBoardState\n          });\n          break;\n        }\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(IonPage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(IonHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(IonToolbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(IonTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 13\n      }\n    }, \"Treblecross\"))), /*#__PURE__*/React.createElement(IonContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(IonItem, {\n      id: \"rangeSliderItem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(IonRange, {\n      id: \"rangeSlider\",\n      onIonChange: e => {\n        this.setState({\n          numberOfBoards: e.detail.value\n        });\n      },\n      min: 1,\n      max: 5,\n      step: 1,\n      snaps: true,\n      color: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"h2\", {\n      id: \"numBoardsLabel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 11\n      }\n    }, \"Number of Treblecross boards selected: \", +this.state.numberOfBoards), /*#__PURE__*/React.createElement(IonButton, {\n      id: \"generateBoards\",\n      onClick: () => {\n        this.generateTrebleCrossBoard();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }\n    }, \"Generate Boards\"), this.state.boardState.map((Board, boardIndex) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board\",\n      key: boardIndex,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 61\n      }\n    }, Board.map((Square, squareIndex) => /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        this.updateBoardState(boardIndex, squareIndex);\n      },\n      key: boardIndex.toString() + \",\" + squareIndex.toString(),\n      className: \"square\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 15\n      }\n    }, Square ? 'X' : '')))), this.state.gameOver ? /*#__PURE__*/React.createElement(\"h2\", {\n      id: \"gameOverMessage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 34\n      }\n    }, \"The game is over! \", this.state.computerWins ? 'The computer has won!' : 'You have won!') : undefined));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/home/stin/School/Treblecross/src/pages/Home.tsx"],"names":["IonContent","IonHeader","IonPage","IonTitle","IonToolbar","IonItem","IonRange","IonButton","React","Home","Component","constructor","props","state","numberOfBoards","boardState","boardSizeArray","boardBruteForce","gameOver","computerWins","generateTrebleCrossBoard","bind","updateBoardState","computersTurn","calculateHeaps","calculateNimSum","doesWinningMoveExist","tempBoardSizeArray","tempBoardState","i","push","Math","floor","random","Array","fill","setState","boardIndex","squareIndex","evaluationArray","tempEvalArray","heapSize","j","heapValues","nimValueArray","map","board_heaps","heap","sum","length","sentinel","winningMove","didPlayerWin","win","cur_heaps","cur_nimsum","bruteForce","temp","heaps","nimsum","render","e","detail","value","Board","Square","toString","undefined"],"mappings":"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","sourcesContent":["import { IonContent, IonHeader, IonPage, IonTitle, IonToolbar, IonItem, IonRange, IonButton } from '@ionic/react';\nimport React from 'react';\nimport ExploreContainer from '../components/ExploreContainer';\nimport './Home.css';\n\ntype MyState = {\n  numberOfBoards: any;\n  boardState: boolean[][];\n  boardSizeArray: number[];\n  boardBruteForce: boolean[][];\n  gameOver: boolean;\n  computerWins: boolean;\n}\n\ntype MyProps = {\n\n}\n\nclass Home extends React.Component<MyProps,MyState> {\n  constructor(props: MyProps) {\n    super(props)\n\n    this.state = {\n      numberOfBoards: 1,\n      boardState: [],\n      boardSizeArray: [],\n      boardBruteForce: [],\n      gameOver: false,\n      computerWins: false\n    }\n\n    this.generateTrebleCrossBoard = this.generateTrebleCrossBoard.bind(this);\n    this.updateBoardState = this.updateBoardState.bind(this);\n    this.computersTurn = this.computersTurn.bind(this);\n    this.calculateHeaps = this.calculateHeaps.bind(this);\n    this.calculateNimSum = this.calculateNimSum.bind(this);\n    this.doesWinningMoveExist = this.doesWinningMoveExist.bind(this);\n  }\n\n\n\n\n  generateTrebleCrossBoard() {\n    let tempBoardSizeArray = []\n    let tempBoardState = []\n    for(let i = 0; i < this.state.numberOfBoards; i++) {\n      //creates a board of size 1 to 14\n      tempBoardSizeArray.push(Math.floor(Math.random() * Math.floor(8))+5)\n      tempBoardState.push(new Array(tempBoardSizeArray[i]).fill(false))\n    }\n    this.setState({boardState: tempBoardState, boardSizeArray: tempBoardSizeArray})\n\n  }\n\n  updateBoardState(boardIndex: number, squareIndex: number) {\n    if(this.state.boardState[boardIndex][squareIndex] !== true && this.state.gameOver !== true) {\n      let tempBoardState = this.state.boardState;\n      tempBoardState[boardIndex][squareIndex] = true;\n      this.setState({boardState: tempBoardState})\n      this.computersTurn()\n    }\n  }\n\n  calculateHeaps(boardState: boolean[][]) : number[][]{\n    let evaluationArray = []\n    let tempEvalArray : number[] = []\n    let heapSize : number = 0;\n    //need to see all heaps\n    for(let i = 0; i < this.state.numberOfBoards; i++) {\n      heapSize = 0;\n      for(let j = 0; j < this.state.boardSizeArray[i]; j++) {\n        if(boardState[i][j] === false) {\n          heapSize = heapSize + 1;\n          if(j === 0) {\n            heapSize = heapSize + 1;\n          }\n        } else {\n          //we hit an X\n          if(heapSize !== 0) {\n            heapSize = heapSize - 1;\n          }\n          if(heapSize !== 0) {\n            tempEvalArray.push(heapSize);\n          }\n          heapSize = -1;\n        }\n      }\n      if(heapSize === this.state.boardSizeArray[i]) {\n        heapSize = heapSize + 2;\n        tempEvalArray.push(heapSize);\n        heapSize = 0;\n      } else {\n        if(heapSize !== 0 && heapSize !== -1) {\n          heapSize = heapSize + 1;\n          tempEvalArray.push(heapSize);\n          heapSize = 0;\n        }\n      }\n      evaluationArray.push(tempEvalArray)\n      tempEvalArray = []\n    }\n\n    return evaluationArray\n  }\n\n  calculateNimSum(evaluationArray: number[][]) : number {\n    let heapValues = [0,0,0,1,1,1,2,2,0,3,3,1,1,1,0]\n    let nimValueArray = evaluationArray.map(board_heaps => {\n      return board_heaps.map(heap => {\n        return heapValues[heap]\n      })\n    })\n\n    let sum = 0\n    for(let i = 0; i < this.state.numberOfBoards; i++) {\n      for(let j = 0; j < nimValueArray[i].length; j++) {\n        if(nimValueArray[i][j]) {\n          sum = sum^nimValueArray[i][j]\n        }\n      }\n    }\n    return sum;\n  }\n\n  doesWinningMoveExist() : number[] {\n    let sentinel = true\n    let winningMove = [-1,-1]\n    for(let i = 0; i < this.state.numberOfBoards; i++) {\n\n      for(let j = 0; j < this.state.boardSizeArray[i]; j++) {\n        if(this.state.boardState[i][j] === true) {\n          if(j - 1 > -1) {\n            if(this.state.boardState[i][j-1] === true) {\n              sentinel = false;\n              if(j - 2 > -1) {\n                winningMove = [i,j-2]\n              } else {\n                winningMove = [i,j+1]\n              }\n            }\n          }\n          if(j - 2 > -1) {\n            if(this.state.boardState[i][j-2] === true) {\n              sentinel = false;\n              winningMove = [i,j-1]\n            }\n          }\n          if(j+1 < this.state.boardState[i].length) {\n            if(this.state.boardState[i][j+1] === true) {\n              sentinel = false;\n              if(j+2 < this.state.boardState[i].length) {\n                winningMove = [i,j+2]\n              } else {\n                winningMove = [i,j-1]\n              }\n            }\n          }\n          if(j+2 < this.state.boardState[i].length) {\n            if(this.state.boardState[i][j+2] === true) {\n              sentinel = false;\n              winningMove = [i,j+1]\n            }\n          }\n        }\n      }\n    }\n    return winningMove\n  }\n\n  didPlayerWin() : boolean {\n    let win = false;\n    for(let i = 0; i < this.state.numberOfBoards; i++) {\n      for(let j = 0; j < this.state.boardSizeArray[i]; j++) {\n        if(this.state.boardState[i][j] === true) {\n          if(j + 1 < this.state.boardSizeArray[i] && this.state.boardState[i][j+1] === true) {\n            if(j + 2 < this.state.boardSizeArray[i] && this.state.boardState[i][j+2] === true) {\n              this.setState({gameOver: true, computerWins: false})\n            }\n          }\n        }\n      }\n    }\n    return win\n  }\n\n  computersTurn() {\n\n    let cur_heaps = this.calculateHeaps(this.state.boardState)\n    let cur_nimsum = this.calculateNimSum(cur_heaps)\n    //evaulate board state\n    let bruteForce : boolean[][]= []\n    for(let i = 0; i < this.state.boardState.length; i++) {\n      let temp = []\n      for(let j = 0 ; j < this.state.boardState[i].length; j++) {\n        temp.push(this.state.boardState[i][j])\n      }\n      bruteForce.push(temp)\n    }\n\n    //brute force method to try and find best bestMove\n    for(let i = 0; i < this.state.numberOfBoards; i++) {\n\n      for(let j = 0; j < this.state.boardSizeArray[i]; j++) {\n        let sentinel = true\n              if(bruteForce[i][j] === true) {\n                sentinel = false;\n              }\n              if(j - 1 > -1) {\n                if(bruteForce[i][j-1] === true) {\n                  sentinel = false;\n                }\n              }\n              if(j - 2 > -1) {\n                if(bruteForce[i][j-2] === true) {\n                  sentinel = false;\n                }\n              }\n              if(j+1 < bruteForce[i].length) {\n                if(bruteForce[i][j+1] === true) {\n                  sentinel = false;\n                }\n              }\n              if(j+2 < bruteForce[i].length) {\n                if(bruteForce[i][j+2] === true) {\n                  sentinel = false;\n                }\n              }\n              let winningMove = this.doesWinningMoveExist()\n              if(winningMove[0] !== -1) {\n\n                let tempBoardState = this.state.boardState;\n                tempBoardState[winningMove[0]][winningMove[1]] = true;\n                this.setState({boardState: tempBoardState, gameOver: true, computerWins: true})\n                break;\n              }\n\n              if(sentinel) {\n                bruteForce[i][j] = true\n                let heaps = this.calculateHeaps(bruteForce)\n                let nimsum = this.calculateNimSum(heaps)\n                if(nimsum === 0) {\n                  //we found our move\n                  let tempBoardState = this.state.boardState;\n                  tempBoardState[i][j] = true;\n                  this.setState({boardState: tempBoardState})\n                  break;\n                } else {\n                  bruteForce[i][j] = false\n\n          }\n        }\n      }\n    }\n    //we have found zero moves to reduce game to zero sum. make first available move that does not immediately lose the game\n    for(let i = 0; i < this.state.numberOfBoards; i++) {\n\n      for(let j = 0; j < this.state.boardSizeArray[i]; j++) {\n        let sentinel = true\n              if(bruteForce[i][j] === true) {\n                sentinel = false;\n              }\n              if(j - 1 > -1) {\n                if(bruteForce[i][j-1] === true) {\n                  sentinel = false;\n                }\n              }\n              if(j - 2 > -1) {\n                if(bruteForce[i][j-2] === true) {\n                  sentinel = false;\n                }\n              }\n              if(j+1 < bruteForce[i].length) {\n                if(bruteForce[i][j+1] === true) {\n                  sentinel = false;\n                }\n              }\n              if(j+2 < bruteForce[i].length) {\n                if(bruteForce[i][j+2] === true) {\n                  sentinel = false;\n                }\n              }\n\n              if(sentinel) {\n                let tempBoardState = this.state.boardState;\n                tempBoardState[i][j] = true;\n                this.setState({boardState: tempBoardState})\n                break;\n        }\n      }\n    }\n\n    //we have found zero moves we can do that will not immediately lose the game. time for the computer to lose, gg player.\n    for(let i = 0; i < this.state.numberOfBoards; i++) {\n\n      for(let j = 0; j < this.state.boardSizeArray[i]; j++) {\n        if(bruteForce[i][j] !== true) {\n          let tempBoardState = this.state.boardState;\n          tempBoardState[i][j] = true;\n          this.setState({boardState: tempBoardState})\n          break;\n        }\n      }\n    }\n  }\n\n\n  render() {\n    return (\n      <IonPage>\n        <IonHeader>\n          <IonToolbar>\n            <IonTitle>Treblecross</IonTitle>\n          </IonToolbar>\n        </IonHeader>\n        <IonContent>\n\n\n          <IonItem id='rangeSliderItem'>\n            <IonRange id='rangeSlider' onIonChange={e => {this.setState({numberOfBoards: e.detail.value})}} min={1} max={5} step={1} snaps={true} color=\"secondary\" />\n          </IonItem>\n          <h2 id='numBoardsLabel'>Number of Treblecross boards selected: {+ this.state.numberOfBoards}</h2>\n          <IonButton id='generateBoards' onClick={() => {this.generateTrebleCrossBoard()}}>Generate Boards</IonButton>\n\n          {this.state.boardState.map((Board, boardIndex) => <div className='board' key={boardIndex}>{\n            Board.map((Square, squareIndex) =>\n              <button onClick={() => {this.updateBoardState(boardIndex, squareIndex)}} key={boardIndex.toString() + \",\" + squareIndex.toString()} className=\"square\">{Square ? 'X' : ''}</button>\n            )\n          }</div>\n          )}\n\n          {this.state.gameOver ? <h2 id='gameOverMessage'>The game is over! {this.state.computerWins ? 'The computer has won!' : 'You have won!'}</h2> : undefined}\n\n        </IonContent>\n      </IonPage>\n    );\n  }\n}\n\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}