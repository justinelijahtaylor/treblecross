{"ast":null,"code":"var _jsxFileName = \"/home/stin/School/Treblecross/src/pages/Home.tsx\";\nimport { IonContent, IonHeader, IonPage, IonTitle, IonToolbar, IonItem, IonRange, IonButton } from '@ionic/react';\nimport React from 'react';\nimport './Home.css';\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      numberOfBoards: 1,\n      boardState: [],\n      boardSizeArray: [],\n      boardBruteForce: []\n    };\n    this.generateTrebleCrossBoard = this.generateTrebleCrossBoard.bind(this);\n    this.updateBoardState = this.updateBoardState.bind(this);\n    this.computersTurn = this.computersTurn.bind(this);\n    this.calculateHeaps = this.calculateHeaps.bind(this);\n    this.calculateNimSum = this.calculateNimSum.bind(this);\n  }\n\n  generateTrebleCrossBoard() {\n    let tempBoardSizeArray = [];\n    let tempBoardState = [];\n\n    for (let i = 0; i < this.state.numberOfBoards; i++) {\n      //creates a board of size 1 to 14\n      tempBoardSizeArray.push(Math.floor(Math.random() * Math.floor(11)) + 3);\n      tempBoardState.push(new Array(tempBoardSizeArray[i]).fill(false));\n    }\n\n    this.setState({\n      boardState: tempBoardState,\n      boardSizeArray: tempBoardSizeArray\n    });\n  }\n\n  updateBoardState(boardIndex, squareIndex) {\n    let tempBoardState = this.state.boardState;\n    tempBoardState[boardIndex][squareIndex] = true;\n    this.setState({\n      boardState: tempBoardState\n    });\n    this.setState({\n      boardBruteForce: this.state.boardState\n    });\n    this.computersTurn();\n  }\n\n  calculateHeaps(boardState) {\n    let evaluationArray = [];\n    let tempEvalArray = [];\n    let heapSize = 0; //need to see all heaps\n\n    for (let i = 0; i < this.state.numberOfBoards; i++) {\n      heapSize = 0;\n\n      for (let j = 0; j < this.state.boardSizeArray[i]; j++) {\n        if (boardState[i][j] === false) {\n          heapSize = heapSize + 1;\n\n          if (j === 0) {\n            heapSize = heapSize + 1;\n          }\n        } else {\n          //we hit an X\n          if (heapSize !== 0) {\n            heapSize = heapSize - 1;\n          }\n\n          if (heapSize !== 0) {\n            tempEvalArray.push(heapSize);\n          }\n\n          heapSize = -1;\n        }\n      }\n\n      if (heapSize === this.state.boardSizeArray[i]) {\n        heapSize = heapSize + 2;\n        tempEvalArray.push(heapSize);\n        heapSize = 0;\n      } else {\n        if (heapSize !== 0 && heapSize !== -1) {\n          heapSize = heapSize + 1;\n          tempEvalArray.push(heapSize);\n          heapSize = 0;\n        }\n      }\n\n      console.log(tempEvalArray);\n      evaluationArray.push(tempEvalArray);\n      tempEvalArray = [];\n    }\n\n    return evaluationArray;\n  }\n\n  calculateNimSum(evaluationArray) {\n    let heapValues = [0, 0, 0, 1, 1, 1, 2, 2, 0, 3, 3, 1, 1, 1, 0];\n    let nimValueArray = evaluationArray.map(board_heaps => {\n      return board_heaps.map(heap => {\n        return heapValues[heap];\n      });\n    });\n    let sum = 0;\n\n    for (let i = 0; i < this.state.numberOfBoards; i++) {\n      for (let j = 0; j < nimValueArray[i].length; j++) {\n        if (nimValueArray[i][j]) {\n          sum = sum ^ nimValueArray[i][j];\n        }\n      }\n    }\n\n    return sum;\n  }\n\n  computersTurn() {\n    console.log(\"===========================\"); //evaulate board state\n\n    let bruteForce = this.state.boardBruteForce; //brute force method to try and find best bestMove\n\n    for (let i = 0; i < this.state.numberOfBoards; i++) {\n      for (let j = 0; j < this.state.boardSizeArray[i]; j++) {\n        if (this.state.boardState[i][j] === false) {\n          if (j + 1 < this.state.boardSizeArray[i] && this.state.boardState[i][j + 1] === false) {\n            if (j - 1 > -1 && this.state.boardState[i][j - 1] === false) {\n              console.log(bruteForce);\n              let heaps = this.calculateHeaps(bruteForce);\n              let nimsum = this.calculateNimSum(heaps);\n\n              if (nimsum === 0) {\n                //we found our move\n                console.log(\"row: \" + i + \" col: \" + j);\n                break;\n              } else {\n                bruteForce[i][j] = false;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(IonPage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(IonHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(IonToolbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(IonTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }\n    }, \"Treblecross\"))), /*#__PURE__*/React.createElement(IonContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(IonItem, {\n      id: \"rangeSliderItem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(IonRange, {\n      id: \"rangeSlider\",\n      onIonChange: e => {\n        this.setState({\n          numberOfBoards: e.detail.value\n        });\n      },\n      min: 1,\n      max: 5,\n      step: 1,\n      snaps: true,\n      color: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"h2\", {\n      id: \"numBoardsLabel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }\n    }, \"Number of Treblecross boards selected: \", +this.state.numberOfBoards), /*#__PURE__*/React.createElement(IonButton, {\n      id: \"generateBoards\",\n      onClick: () => {\n        this.generateTrebleCrossBoard();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }\n    }, \"Generate Boards\"), this.state.boardState.map((Board, boardIndex) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board\",\n      key: boardIndex,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 61\n      }\n    }, Board.map((Square, squareIndex) => /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        this.updateBoardState(boardIndex, squareIndex);\n      },\n      key: boardIndex.toString() + \",\" + squareIndex.toString(),\n      className: \"square\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 15\n      }\n    }, Square ? 'X' : ''))))));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/home/stin/School/Treblecross/src/pages/Home.tsx"],"names":["IonContent","IonHeader","IonPage","IonTitle","IonToolbar","IonItem","IonRange","IonButton","React","Home","Component","constructor","props","state","numberOfBoards","boardState","boardSizeArray","boardBruteForce","generateTrebleCrossBoard","bind","updateBoardState","computersTurn","calculateHeaps","calculateNimSum","tempBoardSizeArray","tempBoardState","i","push","Math","floor","random","Array","fill","setState","boardIndex","squareIndex","evaluationArray","tempEvalArray","heapSize","j","console","log","heapValues","nimValueArray","map","board_heaps","heap","sum","length","bruteForce","heaps","nimsum","render","e","detail","value","Board","Square","toString"],"mappings":"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","sourcesContent":["import { IonContent, IonHeader, IonPage, IonTitle, IonToolbar, IonItem, IonRange, IonButton } from '@ionic/react';\nimport React from 'react';\nimport ExploreContainer from '../components/ExploreContainer';\nimport './Home.css';\n\ntype MyState = {\n  numberOfBoards: any;\n  boardState: boolean[][];\n  boardSizeArray: number[];\n  boardBruteForce: boolean[][];\n}\n\ntype MyProps = {\n\n}\n\nclass Home extends React.Component<MyProps,MyState> {\n  constructor(props: MyProps) {\n    super(props)\n\n    this.state = {\n      numberOfBoards: 1,\n      boardState: [],\n      boardSizeArray: [],\n      boardBruteForce: []\n    }\n\n    this.generateTrebleCrossBoard = this.generateTrebleCrossBoard.bind(this);\n    this.updateBoardState = this.updateBoardState.bind(this);\n    this.computersTurn = this.computersTurn.bind(this);\n    this.calculateHeaps = this.calculateHeaps.bind(this);\n    this.calculateNimSum = this.calculateNimSum.bind(this);\n  }\n\n\n\n\n  generateTrebleCrossBoard() {\n    let tempBoardSizeArray = []\n    let tempBoardState = []\n    for(let i = 0; i < this.state.numberOfBoards; i++) {\n      //creates a board of size 1 to 14\n      tempBoardSizeArray.push(Math.floor(Math.random() * Math.floor(11))+3)\n      tempBoardState.push(new Array(tempBoardSizeArray[i]).fill(false))\n    }\n    this.setState({boardState: tempBoardState, boardSizeArray: tempBoardSizeArray})\n\n  }\n\n  updateBoardState(boardIndex: number, squareIndex: number) {\n    let tempBoardState = this.state.boardState;\n    tempBoardState[boardIndex][squareIndex] = true;\n    this.setState({boardState: tempBoardState})\n    this.setState({boardBruteForce: this.state.boardState})\n    this.computersTurn()\n  }\n\n  calculateHeaps(boardState: boolean[][]) : number[][]{\n    let evaluationArray = []\n    let tempEvalArray : number[] = []\n    let heapSize : number = 0;\n    //need to see all heaps\n    for(let i = 0; i < this.state.numberOfBoards; i++) {\n      heapSize = 0;\n      for(let j = 0; j < this.state.boardSizeArray[i]; j++) {\n        if(boardState[i][j] === false) {\n          heapSize = heapSize + 1;\n          if(j === 0) {\n            heapSize = heapSize + 1;\n          }\n        } else {\n          //we hit an X\n          if(heapSize !== 0) {\n            heapSize = heapSize - 1;\n          }\n          if(heapSize !== 0) {\n            tempEvalArray.push(heapSize);\n          }\n          heapSize = -1;\n        }\n      }\n      if(heapSize === this.state.boardSizeArray[i]) {\n        heapSize = heapSize + 2;\n        tempEvalArray.push(heapSize);\n        heapSize = 0;\n      } else {\n        if(heapSize !== 0 && heapSize !== -1) {\n          heapSize = heapSize + 1;\n          tempEvalArray.push(heapSize);\n          heapSize = 0;\n        }\n      }\n      console.log(tempEvalArray);\n      evaluationArray.push(tempEvalArray)\n      tempEvalArray = []\n    }\n\n    return evaluationArray\n  }\n\n  calculateNimSum(evaluationArray: number[][]) : number {\n    let heapValues = [0,0,0,1,1,1,2,2,0,3,3,1,1,1,0]\n    let nimValueArray = evaluationArray.map(board_heaps => {\n      return board_heaps.map(heap => {\n        return heapValues[heap]\n      })\n    })\n\n    let sum = 0\n    for(let i = 0; i < this.state.numberOfBoards; i++) {\n      for(let j = 0; j < nimValueArray[i].length; j++) {\n        if(nimValueArray[i][j]) {\n          sum = sum^nimValueArray[i][j]\n        }\n      }\n    }\n    return sum;\n  }\n\n  computersTurn() {\n    console.log(\"===========================\")\n    //evaulate board state\n    let bruteForce = this.state.boardBruteForce\n    //brute force method to try and find best bestMove\n    for(let i = 0; i < this.state.numberOfBoards; i++) {\n      for(let j = 0; j < this.state.boardSizeArray[i]; j++) {\n        if(this.state.boardState[i][j] === false) {\n          if(j+1 < this.state.boardSizeArray[i] && this.state.boardState[i][j+1] === false) {\n            if(j -1 > -1 && this.state.boardState[i][j-1] === false) {\n\n              console.log(bruteForce)\n              let heaps = this.calculateHeaps(bruteForce)\n              let nimsum = this.calculateNimSum(heaps)\n              if(nimsum === 0) {\n                //we found our move\n                console.log(\"row: \" + i + \" col: \" + j)\n                break;\n              } else {\n                bruteForce[i][j] = false\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n\n  render() {\n    return (\n      <IonPage>\n        <IonHeader>\n          <IonToolbar>\n            <IonTitle>Treblecross</IonTitle>\n          </IonToolbar>\n        </IonHeader>\n        <IonContent>\n\n\n          <IonItem id='rangeSliderItem'>\n            <IonRange id='rangeSlider' onIonChange={e => {this.setState({numberOfBoards: e.detail.value})}} min={1} max={5} step={1} snaps={true} color=\"secondary\" />\n          </IonItem>\n          <h2 id='numBoardsLabel'>Number of Treblecross boards selected: {+ this.state.numberOfBoards}</h2>\n          <IonButton id='generateBoards' onClick={() => {this.generateTrebleCrossBoard()}}>Generate Boards</IonButton>\n\n          {this.state.boardState.map((Board, boardIndex) => <div className='board' key={boardIndex}>{\n            Board.map((Square, squareIndex) =>\n              <button onClick={() => {this.updateBoardState(boardIndex, squareIndex)}} key={boardIndex.toString() + \",\" + squareIndex.toString()} className=\"square\">{Square ? 'X' : ''}</button>\n            )\n          }</div>\n          )}\n\n        </IonContent>\n      </IonPage>\n    );\n  }\n}\n\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}